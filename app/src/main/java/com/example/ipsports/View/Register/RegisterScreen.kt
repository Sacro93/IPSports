package com.example.ipsports.View.Register

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Email
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.Person
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavHostController
import com.example.ipsports.data.Auth.AuthResult
import com.example.ipsports.data.routesNavigation.Routes
import com.example.ipsports.data.Auth.ValidationUtils
import com.example.ipsports.View.Reusable.ButtonPrimary
import com.example.ipsports.View.Reusable.LocationDropdown
import com.example.ipsports.View.Reusable.ReusableInputField
import com.example.ipsports.View.theme.Font.QS
import com.example.ipsports.ViewModel.Autenticacion.AuthViewModel
import com.example.ipsports.ViewModel.ui.UserViewModel
import com.example.ipsports.data.model.User
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.delay

/*Resumen y Consideraciones
Consolidamos la verificaci√≥n de email en un √∫nico flujo usando un DisposableEffect para escuchar los cambios de autenticaci√≥n, y un LaunchedEffect que reacciona cuando se activa el estado de verificaci√≥n.
Se usan tres efectos:
Uno para manejar el estado de authResult (registro, error, loading).
Uno para escuchar emailVerificationResult y activar el di√°logo de verificaci√≥n.
Y otro DisposableEffect para escuchar cambios en el estado de autenticaci√≥n (esto se encargar√° de redirigir si el email se verifica).
El bot√≥n de registro se deshabilita mientras isRegistering es true.
Los di√°logos para notificar al usuario se muestran seg√∫n los estados correspondientes.
Este flujo permite:

Enviar el correo de verificaci√≥n al registrar.
Mostrar una notificaci√≥n de que se envi√≥ el correo.
Detectar autom√°ticamente cuando el usuario verifica su correo y redirigirlo a la pantalla de inicio de sesi√≥n.*/

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterScreen(
    authViewModel: AuthViewModel = hiltViewModel(),
    navController: NavHostController,
    onBack: () -> Unit
) {
    var name by remember { mutableStateOf("") }
    var surname by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var location by remember { mutableStateOf("Barcelona") }

    var isRegistering by remember { mutableStateOf(false) }
    var showEmailSentDialog by remember { mutableStateOf(false) }
    var errorMessages by remember { mutableStateOf<Map<String, String>>(emptyMap()) }

    val authResult by authViewModel.authResult.collectAsState()  // ‚úÖ Cambiado a collectAsState()
    val snackbarHostState = remember { SnackbarHostState() } // ‚úÖ Para mostrar errores con Snackbar

    val isEmailValid by remember { derivedStateOf { ValidationUtils.isValidEmail(email) } }
    val isPasswordValid by remember { derivedStateOf { ValidationUtils.isValidPassword(password) } }

    val userViewModel: UserViewModel = hiltViewModel() // üîπ Agregar UserViewModel

    val doPasswordsMatch by remember {
        derivedStateOf {
            ValidationUtils.doPasswordsMatch(
                password,
                confirmPassword
            )
        }
    }

    LaunchedEffect(authResult) {
        println("üîπ Cambio en authResult: $authResult")

        when (authResult) {
            is AuthResult.Loading -> {
                isRegistering = true
                println("üîÑ Registrando usuario...")
            }

            is AuthResult.Success -> {
                isRegistering = false
                showEmailSentDialog = true
                println("‚úÖ Usuario registrado en Firebase Auth")

                // üîπ Obtener UID del usuario autenticado
                val userId = FirebaseAuth.getInstance().currentUser?.uid ?: return@LaunchedEffect

                // üîπ Crear el objeto User
                val newUser = User(
                    id = userId,
                    email = email,
                    name = name,
                    surname = surname,
                    location = location,
                    verified = false, // Asumimos que a√∫n no verific√≥ el email
                    profileImageUrl = null
                )

                // üîπ Guardar el usuario en Firestore
                userViewModel.saveUser(newUser)

                delay(3000) // ‚è≥ Espera 3 segundos antes de redirigir
                navController.navigate(Routes.LOGIN) {
                    popUpTo(Routes.REGISTER) { inclusive = true }
                }
            }

            is AuthResult.Failure -> {
                isRegistering = false
                val error = (authResult as AuthResult.Failure).exception.message ?: "Error desconocido"
                errorMessages = mapOf("general" to error)
                println("‚ùå Error en registro: $error")
                snackbarHostState.showSnackbar(error)
            }

            else -> Unit
        }
    }


    // Di√°logo para notificar que se envi√≥ el email de verificaci√≥n
    if (showEmailSentDialog) {
        AlertDialog(
            onDismissRequest = { showEmailSentDialog = false },
            title = { Text("Verificaci√≥n enviada") },
            text = { Text("Debes corroborar tu correo electr√≥nico para completar el registro.") },
            confirmButton = {
                Button(onClick = { showEmailSentDialog = false }) {
                    Text("Aceptar")
                }
            }
        )
    }

    // UI
    Scaffold(
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) }, // ‚úÖ Agregado Snackbar
        topBar = {
            TopAppBar(
                title = { Text("Registro", color = Color.White) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(
                            Icons.AutoMirrored.Filled.ArrowBack,
                            contentDescription = "Volver",
                            tint = Color.White
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.Transparent)
            )
        }
    ) { padding ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF1E88E5),
                            Color(0xFF1565C0),
                            Color(0xFF000000)
                        )
                    )
                )
                .padding(padding),
            contentAlignment = Alignment.TopCenter
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Spacer(modifier = Modifier.height(16.dp))

                QS()

                Spacer(modifier = Modifier.height(16.dp))

                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = Color.Black.copy(alpha = 0.3f))
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        ReusableInputField(
                            value = name,
                            onValueChange = { name = it },
                            label = "Nombre",
                            leadingIcon = Icons.Default.Person
                        )
                        ReusableInputField(
                            value = surname,
                            onValueChange = { surname = it },
                            label = "Apellido",
                            leadingIcon = Icons.Default.Person
                        )
                        // Campo de correo electr√≥nico
                        ReusableInputField(
                            label = "Correo Electr√≥nico",
                            value = email,
                            onValueChange = {
                                email = it
                                errorMessages = errorMessages - "email"
                            },
                            leadingIcon = Icons.Default.Email
                        )
                        if (email.isNotBlank() && !isEmailValid) {
                            Text("Correo electr√≥nico no v√°lido", color = Color.Red, fontSize = 12.sp)
                        }
                        ReusableInputField(
                            value = password,
                            onValueChange = { password = it },
                            label = "Contrase√±a",
                            isPassword = true,
                            leadingIcon = Icons.Default.Lock
                        )
                        ReusableInputField(
                            value = confirmPassword,
                            onValueChange = { confirmPassword = it },
                            label = "Confirmar Contrase√±a",
                            isPassword = true,
                            leadingIcon = Icons.Default.Lock
                        )

                        // Validaciones en tiempo real
                        if (email.isNotBlank() && !isEmailValid) {
                            Text(
                                "Correo electr√≥nico no v√°lido",
                                color = Color.Red,
                                fontSize = 12.sp
                            )
                        }
                        if (password.isNotBlank() && !isPasswordValid) {
                            Text(
                                "La contrase√±a debe tener al menos 8 caracteres y una may√∫scula",
                                color = Color.Red,
                                fontSize = 12.sp
                            )
                        }
                        if (confirmPassword.isNotBlank() && !doPasswordsMatch) {
                            Text(
                                "Las contrase√±as no coinciden",
                                color = Color.Red,
                                fontSize = 12.sp
                            )
                        }

                        // Selector de ubicaci√≥n
                        LocationDropdown(location) { location = it }
                    }
                }

                Spacer(modifier = Modifier.height(30.dp))

                ButtonPrimary(
                    text = if (isRegistering) "Registrando..." else "Registrarse",
                    onClick = {
                        println("üîπ Bot√≥n de registro presionado") // ‚úÖ Debug en Logcat
                        errorMessages = emptyMap()
                        authViewModel.registerUser(
                            email,
                            password,
                            confirmPassword,
                            name,
                            surname,
                            location
                        )
                    },
                    modifier = Modifier
                        .align(Alignment.CenterHorizontally)
                        .width(200.dp),
                    enabled = true
                )
                Spacer(modifier = Modifier.height(20.dp))

                // Mostrar errores generales
                if (errorMessages.containsKey("general")) {
                    Text(errorMessages["general"] ?: "", color = Color.Red, fontSize = 14.sp)
                }
            }
        }
    }
}

/*
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterScreen(
    authViewModel: AuthViewModel = hiltViewModel(),
    navController: NavHostController,
    onBack: () -> Unit
) {
    // Estados para los campos del formulario
    var name by remember { mutableStateOf("") }
    var surname by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var confirmPassword by remember { mutableStateOf("") }
    var location by remember { mutableStateOf("Barcelona") }

    // Estados para controlar la UI
    var isRegistering by remember { mutableStateOf(false) }
    var showEmailSentDialog by remember { mutableStateOf(false) }
    var errorMessages by remember { mutableStateOf<Map<String, String>>(emptyMap()) }
    var isRegistrationSuccessful by remember { mutableStateOf(false) } // Nuevo estado



    // Validaciones en tiempo real
    val isEmailValid by remember {
        derivedStateOf { ValidationUtils.isValidEmail(email) }
    }

    val isPasswordValid by remember {
        derivedStateOf { ValidationUtils.isValidPassword(password) }
    }

    val doPasswordsMatch by remember {
        derivedStateOf { ValidationUtils.doPasswordsMatch(password, confirmPassword) }
    }

    if (password.isNotBlank() && !isPasswordValid) {
        Text("La contrase√±a debe tener al menos 8 caracteres y una may√∫scula", color = Color.Red, fontSize = 12.sp)
    }

// Observar cambios en el resultado de autenticaci√≥n
    val authResult by authViewModel.authResult.observeAsState()

    // Efecto para manejar el resultado de autenticaci√≥n
    LaunchedEffect(authResult) {
        when (authResult) {
            is AuthResult.Loading -> isRegistering = true
            is AuthResult.Success -> {
                isRegistering = false
                showEmailSentDialog = true // Mostrar di√°logo de correo enviado
                isRegistrationSuccessful = true // Marcar el registro como exitoso
            }
            is AuthResult.Failure -> {
                isRegistering = false
                errorMessages = mapOf("general" to ((authResult as AuthResult.Failure).exception.message ?: "Error desconocido"))
            }
            else -> Unit
        }
    }

    // Efecto para redirigir despu√©s de un registro exitoso
    LaunchedEffect(isRegistrationSuccessful) {
        if (isRegistrationSuccessful) {
            navController.navigate("${Routes.LOGIN}?showVerificationMessage=true") {
                popUpTo(Routes.REGISTER) { inclusive = true }
            }
        }
    }

    // Di√°logo para notificar que se envi√≥ el email de verificaci√≥n
    if (showEmailSentDialog) {
        AlertDialog(
            onDismissRequest = { showEmailSentDialog = false },
            title = { Text("Verificaci√≥n enviada") },
            text = { Text("Debes corroborar tu correo electr√≥nico para completar el registro.") },
            confirmButton = {
                Button(onClick = { showEmailSentDialog = false }) {
                    Text("Aceptar")
                }
            }
        )
    }



    // Scaffold con la estructura de la pantalla
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Registro", color = Color.White) },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Volver", tint = Color.White)
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(containerColor = Color.Transparent)
            )
        }
    ) { padding ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF1E88E5),
                            Color(0xFF1565C0),
                            Color(0xFF000000)
                        )
                    )
                )
                .padding(padding),
            contentAlignment = Alignment.TopCenter
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Spacer(modifier = Modifier.height(16.dp))

                // Logo
                QS()

                Spacer(modifier = Modifier.height(16.dp))

                // Tarjeta con el formulario de registro
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = Color.Black.copy(alpha = 0.3f))
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        // Campo de nombre
                        ReusableInputField(
                            label = "Nombre",
                            value = name,
                            onValueChange = {
                                name = it
                                errorMessages = errorMessages - "name"
                            },
                            leadingIcon = Icons.Default.Person
                        )
                        if (errorMessages.containsKey("name")) {
                            Text(errorMessages["name"] ?: "", color = Color.Red, fontSize = 12.sp)
                        }

                        // Campo de apellido
                        ReusableInputField(
                            label = "Apellido",
                            value = surname,
                            onValueChange = {
                                surname = it
                                errorMessages = errorMessages - "surname"
                            },
                            leadingIcon = Icons.Default.Person
                        )
                        if (errorMessages.containsKey("surname")) {
                            Text(errorMessages["surname"] ?: "", color = Color.Red, fontSize = 12.sp)
                        }

                        // Campo de correo electr√≥nico
                        ReusableInputField(
                            label = "Correo Electr√≥nico",
                            value = email,
                            onValueChange = {
                                email = it
                                errorMessages = errorMessages - "email"
                            },
                            leadingIcon = Icons.Default.Email
                        )
                        if (email.isNotBlank() && !isEmailValid) {
                            Text("Correo electr√≥nico no v√°lido", color = Color.Red, fontSize = 12.sp)
                        }

                        // Campo de contrase√±a
                        ReusableInputField(
                            label = "Contrase√±a",
                            value = password,
                            onValueChange = {
                                password = it
                                errorMessages = errorMessages - "password"
                            },
                            isPassword = true
                        )
                        if (password.isNotBlank() && !isPasswordValid) {
                            Text("La contrase√±a debe tener al menos 8 caracteres y una may√∫scula", color = Color.Red, fontSize = 12.sp)
                        }

                        // Campo de confirmaci√≥n de contrase√±a
                        ReusableInputField(
                            label = "Confirmar Contrase√±a",
                            value = confirmPassword,
                            onValueChange = {
                                confirmPassword = it
                                errorMessages = errorMessages - "confirmPassword"
                            },
                            isPassword = true
                        )
                        if (confirmPassword.isNotBlank() && !doPasswordsMatch) {
                            Text("Las contrase√±as no coinciden", color = Color.Red, fontSize = 12.sp)
                        }

                        // Selector de ubicaci√≥n
                        LocationDropdown(
                            selectedLocation = location,
                            onLocationSelected = {
                                location = it
                                errorMessages = errorMessages - "location"
                            }
                        )
                        if (errorMessages.containsKey("location")) {
                            Text(errorMessages["location"] ?: "", color = Color.Red, fontSize = 12.sp)
                        }
                    }
                }

                Spacer(modifier = Modifier.height(30.dp))

                // Bot√≥n de registro
                ButtonPrimary(
                    text = if (isRegistering) "Registrando" else "Registrarse",
                    onClick = {
                        if (!isRegistering) {
                            errorMessages = emptyMap() // Reinicia errores
                            authViewModel.registerUser(email, password, confirmPassword, name, surname, location)
                        }
                    },
                    modifier = Modifier
                        .align(Alignment.CenterHorizontally)
                        .width(200.dp),
                    enabled = !isRegistering && isEmailValid && isPasswordValid && doPasswordsMatch
                )


                Spacer(modifier = Modifier.height(20.dp))

                // Mostrar errores generales
                if (errorMessages.containsKey("general")) {
                    Text(errorMessages["general"] ?: "", color = Color.Red, fontSize = 14.sp)
                }
            }
        }
    }
}

*/
