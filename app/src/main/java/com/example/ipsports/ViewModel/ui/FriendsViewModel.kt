package com.example.ipsports.ViewModel.ui

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.ipsports.data.model.Friend
import com.example.ipsports.data.repository.FriendRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow


/*
âœ… availableFriends â†’ Usuarios disponibles para agregar como amigos.
âœ… friendsList â†’ Lista de amigos ya agregados.
âœ… isLoading â†’ Indica si se estÃ¡ cargando la informaciÃ³n.
âœ… errorMessage â†’ Maneja errores si ocurre un problema.
âœ… loadAvailableFriends() â†’ Obtiene la lista de usuarios disponibles.
âœ… loadFriends() â†’ Obtiene la lista de amigos ya agregados.
âœ… sendFriendRequest(friendId) â†’ EnvÃ­a una solicitud de amistad a otro usuario.
*/

@HiltViewModel
class FriendViewModel @Inject constructor(
    private val friendRepository: FriendRepository
) : ViewModel() {

    private val _availableFriends = MutableStateFlow<List<Friend>>(emptyList()) // ðŸ”¹ Usuarios disponibles para agregar
    val availableFriends: StateFlow<List<Friend>> = _availableFriends.asStateFlow()

    private val _friendsList = MutableStateFlow<List<Friend>>(emptyList()) // ðŸ”¹ Lista de amigos ya agregados
    val friendsList: StateFlow<List<Friend>> = _friendsList.asStateFlow()

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()

    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()

    init {
      //  loadAvailableFriends()
        loadFriends()
    }

    /** ðŸ”¹ Cargar la lista de usuarios disponibles para agregar como amigos */
    fun loadAvailableFriends() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _availableFriends.value = friendRepository.getAllUsers()
            } catch (e: Exception) {
                _errorMessage.value = "Error al cargar amigos disponibles: ${e.localizedMessage}"
            } finally {
                _isLoading.value = false
            }
        }
    }

    /** ðŸ”¹ Cargar amigos confirmados */
    fun loadFriends() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _friendsList.value = friendRepository.getAcceptedFriends()
            } catch (e: Exception) {
                _isLoading.value = false
            } finally {
                _isLoading.value = false
            }
        }
    }
    /** ðŸ”¹ Enviar solicitud de amistad a otro usuario */
    fun sendFriendRequest(friendId: String) {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                val success = friendRepository.sendFriendRequest(friendId)
                if (!success) {
                    _errorMessage.value = "No se pudo enviar la solicitud"
                }
            } catch (e: Exception) {
                _errorMessage.value = "Error al enviar solicitud: ${e.localizedMessage}"
            } finally {
                _isLoading.value = false
            }
        }
    }
}
